# FIXME: add these fields
# totalRevenue
# performanceFee
# tokenHolderRevenue
# withdrawalVolume
# withdrawalFee
# withdrawalRevenue

type Vault @entity {
  id: ID!
  "Deposit (want) token info"
  token: Token!
  "Share token (ytoken) info"
  shareToken: Token!
  "Current controller"
  controller: Controller!
  "Current strategy"
  strategy: Strategy!
  # TODO: replace with tx when was created
  "Creation transaction"
  transaction: Transaction!

  vaultUpdates: [VaultUpdate!]! @derivedFrom(field: "vault")
  strategyUpdates: [StrategyUpdate!]!

  # TODO: check if those are necessary
  # derived fields
  transfers: [Transfer!]! @derivedFrom(field: "vault")
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "vault")
  harvests: [Harvest!]! @derivedFrom(field: "vault")
  balances: [AccountVaultBalance!]! @derivedFrom(field: "vault")
  strategies: [Strategy!]! @derivedFrom(field: "vault")
}

# used to track balance of both user and vault
interface BalanceUpdate {
  id: ID!
  transaction: Transaction!

  "Deposit (want) token balance"
  balance: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!

  "Share token (ytoken) balance"
  shareBalance: BigInt!
  totalSharesMinted: BigInt!
  totalSharesBurned: BigInt!
}

type VaultUpdate implements BalanceUpdate @entity {
  id: ID!
  transaction: Transaction!

  "Deposit (want) token balance"
  balance: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!

  # totalSupply() in code
  "Share token (ytoken) balance"
  shareBalance: BigInt!
  totalSharesMinted: BigInt!
  totalSharesBurned: BigInt!

  vault: Vault!

  # should include both withdrawal and perfromance fees
  totalEarnings: BigInt!
  # replace by 2 fees below
  # totalHarvests: BigInt!
  totalWithdrawalFees: BigInt!
  # this one essentially accumulates harvest operations
  totalPerformanceFees: BigInt!

  pricePerFullShare: BigInt!
  # TODO: do we need this one?
  # available: BigInt!
}

type AccountUpdate implements BalanceUpdate @entity {
  id: ID!
  transaction: Transaction!

  "Deposit (want) token balance"
  balance: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!

  "Share token (ytoken) balance"
  shareBalance: BigInt!
  totalSharesMinted: BigInt!
  totalSharesBurned: BigInt!

  account: Account!

  "Total (want) token sent"
  totalSent: BigInt!
  "Total (want) token received"
  totalReceived: BigInt!

  "Total share token (ytoken) sent"
  totalSharesSent: BigInt!
  "Total share token (ytoken) received"
  totalSharesReceived: BigInt!
}

type Account @entity {
  id: ID!

  deposits: [Deposit!]! @derivedFrom(field: "account")
  withdrawals: [Deposit!]! @derivedFrom(field: "account")
  vaultBalances: [AccountVaultBalance!]! @derivedFrom(field: "account")

  receivedTransfers: [Transfer!]! @derivedFrom(field: "to")
  sentTransfers: [Transfer!]! @derivedFrom(field: "from")
}

type AccountVaultBalance @entity {
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit (want) token info"
  token: Token!
  shareToken: Token!

  accountBalanceUpdate: [AccountBalanceUpdate!]!
}

type Token @entity {
  id: ID!
  address: Bytes!
  decimals: Int!
  # TODO: (?) add hardcode overwrite in code
  name: String!
  # TODO: (?) add hardcode overwrite in code
  symbol: String!
}

type Transfer @entity {
  id: ID!
  "Sender"
  from: Account!
  "Receiver"
  to: Account!
  # TODO: (?) better naming for value/amount
  value: BigInt!
  "Value normalized to (want) token"
  amount: BigInt!

  token: Token!
  transaction: Transaction!
}

interface Action {
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit (want) token amount"
  amount: BigInt!
  "Share token (ytoken) amount"
  shares: BigInt!
  vaultStats: VaultUpdate!
  transaction: Transaction!
}

type Deposit implements Action @entity {
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit (want) token amount"
  amount: BigInt!
  "Share token (ytoken) amount"
  shares: BigInt!
  vaultStats: VaultUpdate!
  transaction: Transaction!
}

type Withdrawal implements Action @entity {
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit (want) token amount"
  amount: BigInt!
  "Share token (ytoken) amount"
  shares: BigInt!
  vaultStats: VaultUpdate!
  transaction: Transaction!
}

type StrategyUpdate @entity {
  id: ID! # id + strategy
  transaction: Transaction!

  strategy: Strategy!
  "Deposit (want) token balance"
  strategyBalance: BigInt!

  # cummulative sum of earnings
  # basically *performance* fee
  # TODO: add comment
  # this one essentially accumulates harvest operations
  totalPerformanceFees: BigInt!
}

type Harvest @entity {
  id: ID!
  vault: Vault!
  strategy: Strategy!
  harvester: Bytes!

  vaultUpdate: VaultUpdate!
  strategyUpdate: StrategyUpdate!

  transaction: Transaction!
}

enum StrategyStatus {
  Active
  Retired
}

type Strategy @entity {
  id: ID!
  vault: Vault!
  # TODO: (?) add hardcode overwrite for names that are missing
  name: String!
  "Current controller"
  controller: Controller!

  strategyUpdate: [StrategyUpdate!]!
  strategyStatus: StrategyStatus

  harvests: [Harvest!]! @derivedFrom(field: "strategy")
}

type Controller @entity {
  id: ID!
  "Active vaults"
  vaults: [Vault!]! @derivedFrom(field: "controller")
  "Active strategies"
  strategies: [Strategy!]! @derivedFrom(field: "controller")
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  # duplicated field to allow for byte search with transactionHash_contains
  transactionHash: Bytes!


  # deposits: [Deposit!]! @derivedFrom(field: "transaction")
  # withdrawals: [Withdrawal!]! @derivedFrom(field: "transaction")
  # transfers: [Transfer!]! @derivedFrom(field: "transaction")
  # harvests: [Harvest!]! @derivedFrom(field: "transaction")
  # # TODO: rename
  # vaultsUpdated: [Vault!]! @derivedFrom(field: "transaction")
}

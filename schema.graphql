# FIXME: add these fields
# totalRevenue
# performanceFee
# tokenHolderRevenue
# withdrawalVolume
# withdrawalFee
# withdrawalRevenue

type Vault @entity {
  id: ID!
  "Deposit (want) token info"
  token: Token!
  "Share token (ytoken) info"
  shareToken: Token!
  "Current controller"
  controller: Controller!
  "Current strategy"
  strategy: Strategy!
  # TODO: replace with tx when was created
  "Creation transaction"
  transaction: Transaction!

  "Vault stats"
  vaultUpdates: [VaultUpdate!]! @derivedFrom(field: "vault")
  "Strategy stats"
  strategyUpdates: [StrategyUpdate!]! # TODO: to derive it I need vault field

  # TODO: check if those are necessary
  # derived fields
  transfers: [Transfer!]! @derivedFrom(field: "vault")
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "vault")
  harvests: [Harvest!]! @derivedFrom(field: "vault")
  balances: [AccountVaultBalance!]! @derivedFrom(field: "vault")
  strategies: [Strategy!]! @derivedFrom(field: "vault")
}

# tracks current balance of both user and vault
interface BalanceUpdate {
  id: ID!
  transaction: Transaction!

  "Deposit (want) token balance"
  balance: BigInt!
  "Total (want) token deposits"
  deposits: BigInt!
  "Total (want) token withdrawals"
  withdrawals: BigInt!

  "Share token (ytoken) balance"
  shareBalance: BigInt!
  "Total share tokens (ytoken) minted"
  sharesMinted: BigInt!
  "Total share tokens (ytoken) burnt"
  sharesBurnt: BigInt!
}

type VaultUpdate implements BalanceUpdate @entity {
  id: ID!
  transaction: Transaction!

  "Deposit (want) token balance"
  balance: BigInt!
  "Total (want) token deposits"
  deposits: BigInt!
  "Total (want) token withdrawals"
  withdrawals: BigInt!

  "Share token (ytoken) balance | totalSupply()"
  shareBalance: BigInt!
  "Total share tokens (ytoken) minted"
  sharesMinted: BigInt!
  "Total share tokens (ytoken) burnt"
  sharesBurnt: BigInt!

  vault: Vault!

  # TODO: (?) denominated to
  "Total (withdrawal + performance*) fees"
  earnings: BigInt!
  # TODO: (?) denominated to
  withdrawalFees: BigInt!
  # TODO: (?) denominated to
  # additional-yield, see: https://docs.yearn.finance/faq#can-you-explain-the-5-fee-on-additional-yield
  performanceFees: BigInt!
  "Share token (ytoken) price denominated to (want) token"
  pricePerFullShare: BigInt!
}

type AccountUpdate implements BalanceUpdate @entity {
  id: ID!
  transaction: Transaction!

  "Deposit (want) token balance"
  balance: BigInt!
  "Total (want) token deposits"
  deposits: BigInt!
  "Total (want) token withdrawals"
  withdrawals: BigInt!

  "Share token (ytoken) balance"
  shareBalance: BigInt!
  "Total share tokens (ytoken) minted"
  sharesMinted: BigInt!
  "Total share tokens (ytoken) burnt"
  sharesBurnt: BigInt!

  account: Account!

  "Total (want) token sent"
  sent: BigInt!
  "Total (want) token received"
  received: BigInt!

  "Total share token (ytoken) sent"
  sharesSent: BigInt!
  "Total share token (ytoken) received"
  sharesReceived: BigInt!
}

type Account @entity {
  id: ID!

  "Vault deposits"
  deposits: [Deposit!]! @derivedFrom(field: "account")
  "Vault withdrawals"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "account")
  vaultBalances: [AccountVaultBalance!]! @derivedFrom(field: "account")

  "Incoming transfers"
  received: [Transfer!]! @derivedFrom(field: "to")
  "Outgoing transfers"
  sent: [Transfer!]! @derivedFrom(field: "from")
}

type AccountVaultBalance @entity {
  "Vault-Account"
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit (want) token info"
  token: Token!
  "Share token (ytoken) info"
  shareToken: Token!

  "Account stats"
  accountUpdate: [AccountUpdate!]!
}

type Token @entity {
  "Token address"
  id: ID!
  address: Bytes!
  decimals: Int!
  # TODO: (?) add hardcode overwrite in code
  name: String!
  # TODO: (?) add hardcode overwrite in code
  symbol: String!
}

type Transfer @entity {
  id: ID!
  "Sender"
  from: Account!
  "Receiver"
  to: Account!
  # TODO: (?) better naming for value/amount
  value: BigInt!
  "Value normalized to (want) token"
  amount: BigInt!

  token: Token!
  transaction: Transaction!
}

interface Action {
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit (want) token amount"
  amount: BigInt!
  "Share token (ytoken) amount"
  shares: BigInt!

  # (!) vault update is triggerd on Action
  # vaultStats: VaultUpdate!
}

type Deposit implements Action @entity {
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit (want) token amount"
  amount: BigInt!
  "Share token (ytoken) amount"
  shares: BigInt!
  transaction: Transaction!

  # (!) vault update is triggerd on Deposit
  # vaultStats: VaultUpdate!
}

type Withdrawal implements Action @entity {
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit (want) token amount"
  amount: BigInt!
  "Share token (ytoken) amount"
  shares: BigInt!
  transaction: Transaction!

  # (!) vault update is triggerd on Withdrawal
  # vaultStats: VaultUpdate!
}

type StrategyUpdate @entity {
  "Strategy + Transaction"
  id: ID!
  transaction: Transaction!

  strategy: Strategy!
  "Deposit (want) token balance"
  balance: BigInt!

  # TODO: (?) denominated to
  # additional-yield, see: https://docs.yearn.finance/faq#can-you-explain-the-5-fee-on-additional-yield
  # essentially performance fee, this one essentially accumulates harvest operations
  earnings: BigInt!
}

type Harvest @entity {
  id: ID!
  vault: Vault!
  strategy: Strategy!
  "Function caller"
  harvester: Bytes!

  "Vault stats"
  vaultUpdate: VaultUpdate!
  "Strategy stats"
  strategyUpdate: StrategyUpdate!

  transaction: Transaction!
}

enum StrategyStatus {
  Active
  Retired
}

type Strategy @entity {
  id: ID!
  vault: Vault!
  # TODO: (?) add hardcode overwrite for names that are missing
  name: String!
  "Current controller"
  controller: Controller!

  "Strategy stats"
  strategyUpdate: [StrategyUpdate!]!
  "Active or retired"
  strategyStatus: StrategyStatus

  "All harvest() calls"
  harvests: [Harvest!]! @derivedFrom(field: "strategy")
}

type Controller @entity {
  id: ID!
  "Active vaults"
  vaults: [Vault!]! @derivedFrom(field: "controller")
  "Active strategies"
  strategies: [Strategy!]! @derivedFrom(field: "controller")
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  # duplicated field to allow for byte search with transactionHash_contains
  transactionHash: Bytes!


  # deposits: [Deposit!]! @derivedFrom(field: "transaction")
  # withdrawals: [Withdrawal!]! @derivedFrom(field: "transaction")
  # transfers: [Transfer!]! @derivedFrom(field: "transaction")
  # harvests: [Harvest!]! @derivedFrom(field: "transaction")
  # # TODO: rename
  # vaultsUpdated: [Vault!]! @derivedFrom(field: "transaction")
}

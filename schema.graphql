type Vault @entity {
  id: ID!
  "Deposit (want) token info"
  token: Token!
  "Share token (ytoken) info"
  shareToken: Token!
  "Current controller"
  controller: Controller!
  "Current strategy"
  strategy: Strategy!
  # TODO: replace with tx when was created
  "Creation transaction"
  transaction: Transaction!

  vaultBalanceUpdates: [VaultBalanceUpdate!]! @derivedFrom(field: "vault")

  vaultUpdates: [VaultUpdate!]!
  strategyUpdates: [StrategyUpdate!]!

  # derived fields
  transfers: [Transfer!]! @derivedFrom(field: "vault")
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "vault")
  harvests: [Harvest!]! @derivedFrom(field: "vault")
  balances: [AccountVaultBalance!]! @derivedFrom(field: "vault")
  strategies: [Strategy!]! @derivedFrom(field: "vault")
  # controllers: [Controller!]! @derivedFrom(field: "vault")
}

# used to track balance of both user and vault
interface BalanceUpdate {
  id: ID!
  transaction: Transaction!

  netDeposits: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
  totalSharesMinted: BigInt!
  totalSharesBurned: BigInt!
}

type VaultBalanceUpdate implements BalanceUpdate @entity {
  id: ID!
  transaction: Transaction!

  netDeposits: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
  totalSharesMinted: BigInt!
  totalSharesBurned: BigInt!

  vault: Vault!

  totalActiveShares: BigInt!
  totalEarnings: BigInt!
  totalHarvestCalls: BigInt!
}

type AccountBalanceUpdate implements BalanceUpdate @entity {
  id: ID!
  transaction: Transaction!

  netDeposits: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
  totalSharesMinted: BigInt!
  totalSharesBurned: BigInt!

  account: Account!

  totalSharesSent: BigInt!
  totalSharesReceived: BigInt!
  totalSent: BigInt!
  totalReceived: BigInt!
  shareBalance: BigInt!
}

type VaultUpdate @entity {
  id: ID! # id + vault
  transaction: Transaction!

  vault: Vault!
  pricePerFullShare: BigInt!
  vaultBalance: BigInt!
  totalSupply: BigInt!
  available: BigInt!
}

type StrategyUpdate @entity {
  id: ID! # id + strategy
  transaction: Transaction!

  strategy: Strategy!
  strategyBalance: BigInt!
  earnings: BigInt!
}

type Account @entity {
  id: ID!
  vaultBalances: [AccountVaultBalance!]! @derivedFrom(field: "account")
  deposits: [Deposit!]! @derivedFrom(field: "account")
  withdrawals: [Deposit!]! @derivedFrom(field: "account")
  receivedTransfers: [Transfer!]! @derivedFrom(field: "to")
  sentTransfers: [Transfer!]! @derivedFrom(field: "from")
}

type AccountVaultBalance @entity {
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit (want) token info"
  token: Token!
  shareToken: Token!

  # add AccountBalanceUpdate
}

type Token @entity {
  id: ID!
  address: Bytes!
  decimals: Int!
  # TODO: (?) add hardcode overwrite for names and symbols
  name: String!
  symbol: String!
}

type Transfer @entity {
  id: ID!
  from: Account!
  to: Account!
  value: BigInt!
  amount: BigInt! # value normalized to base tokens

# TODO: (?) replace with token: Token!
  vault: Vault!
  transaction: Transaction!
}

interface Action {
  id: ID!
  vault: Vault!
  account: Account!
  amount: BigInt!
  shares: BigInt!
  # TODO: check best way to incorporate this updates
  vaultStats: VaultUpdate!
  transaction: Transaction!
}

type Deposit implements Action @entity {
  id: ID!
  vault: Vault!
  account: Account!
  amount: BigInt!
  shares: BigInt!
  # TODO: check best way to incorporate this updates
  vaultStats: VaultUpdate!
  transaction: Transaction!
}

type Withdrawal implements Action @entity {
  id: ID!
  vault: Vault!
  account: Account!
  amount: BigInt!
  shares: BigInt!
  # TODO: check best way to incorporate this updates
  vaultStats: VaultUpdate!
  transaction: Transaction!
}

type Harvest @entity {
  id: ID!
  vault: Vault!
  strategy: Strategy!
  harvester: Bytes!

  vaultUpdate: VaultUpdate!
  strategyUpdate: StrategyUpdate!

  transaction: Transaction!
}

type Strategy @entity {
  id: ID!
  vault: Vault!
  controller: Controller!
  totalEarnings: BigInt!

  harvests: [Harvest!]! @derivedFrom(field: "strategy")
  # TODO: (?) remove
  # activeOnVaults: [Vault!] @derivedFrom(field: "strategy")
}

type Controller @entity {
  id: ID!

  vaults: [Vault!]! @derivedFrom(field: "controller")
  strategies: [Strategy!]! @derivedFrom(field: "controller")
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  # duplicated field to allow for byte search with transactionHash_contains
  transactionHash: Bytes!

  deposits: [Deposit!]! @derivedFrom(field: "transaction")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "transaction")
  transfers: [Transfer!]! @derivedFrom(field: "transaction")
  harvests: [Harvest!]! @derivedFrom(field: "transaction")
  # TODO: rename
  vaultsUpdated: [Vault!]! @derivedFrom(field: "transaction")
}
